# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2020, Kovid Goyal <kovid at kovidgoyal.net>
from __python__ import bound_methods, hash_literals

from elementmaker import E
from gettext import gettext as _

from book_list.globals import get_session_data
from book_list.theme import get_color
from dom import svgicon, unique_id
from modals import error_dialog
from widgets import create_button

ICON_SIZE_VAL = 3
ICON_SIZE_UNIT = 'ex'
ICON_SIZE = f'{ICON_SIZE_VAL}{ICON_SIZE_UNIT}'

builtin_colors_light = {
    'yellow': '#ffeb6b',
    'green': '#c0ed72',
    'blue': '#add8ff',
    'red': '#ffb0ca',
    'purple': '#d9b2ff',
}

builtin_colors_dark = {
    'yellow': '#c18d18',
    'green': '#306f50',
    'blue': '#265589',
    'red': '#a23e5a',
    'purple': '#505088',
}


builtin_decorations_light = builtin_decorations_dark = {
    'wavy': {'text-decoration-style': 'wavy', 'text-decoration-color': 'red', 'text-decoration-line': 'underline'},
    'strikeout': {'text-decoration-line': 'line-through', 'text-decoration-color': 'red'},
}


def friendly_name(kind, which):
    if kind is 'color':
        return {
            'yellow': _('Yellow highlight'),
            'green': _('Green highlight'),
            'blue': _('Blue highlight'),
            'red': _('Pink highlight'),
            'purple': _('Purple highlight'),
        }[which] or _('Unknown highlight')
    return {
        'wavy': _('Red wavy underline'),
        'strikeout': _('Red underline'),
    }[which] or _('Unknown underline')


def builtin_color(which, is_dark):
    return (builtin_colors_dark[which] if is_dark else builtin_colors_light[which]) or builtin_colors_light.yellow


def default_color(is_dark):
    return builtin_color('yellow', is_dark)


def all_builtin_styles():
    ans = v'[]'
    for col in builtin_colors_light:
        ans.push({'type': 'builtin', 'kind': 'color', 'which': col})
    for which in builtin_decorations_light:
        ans.push({'type': 'builtin', 'kind': 'decoration', 'which': which})
    return ans

all_style_keys = v"'type kind which background-color text-decoration-line text-decoration-color text-decoration-style'.split(' ')"


def custom_color_theme(name, lightbg, darkbg):
    return {'type': 'custom', 'kind': 'color', 'light': lightbg, 'dark': darkbg, 'friendly_name': name}


def custom_decoration_theme(name, line_position, line_style, line_color):
    return {
        'type': 'custom', 'kind': 'decoration', 'text-decoration-line': line_position,
        'text-decoration-style': line_style, 'text-decoration-color': line_color,
        'friendly_name': name
    }


def style_key(style):
    return [f'{k}:{style[k]}' for k in all_style_keys].join(';')


class HighlightStyle:

    def __init__(self, style):
        if jstype(style) is 'string':
            style = JSON.parse(style)
        self.style = style or {'type': 'builtin', 'kind': 'color', 'which': 'yellow'}
        self.key = style_key(self.style)

    def make_swatch(self, container, is_dark):
        style = container.style
        style.width = style.height = style.minimumWidth = style.minimumHeight = style.maximumWidth = style.maximumHeight = ICON_SIZE
        s = self.style
        br = ICON_SIZE_VAL / 4

        if s.kind is 'decoration':
            tdl = tds = tdc = None
            if s.type is 'builtin':
                q = builtin_decorations_dark[s.which] if is_dark else builtin_decorations_dark[s.which]
            else:
                q = s
            tdl = q['text-decoration-line'] or None
            tds = q['text-decoration-style'] or None
            tdc = q['text-decoration-color'] or None
            container.textContent = 'ab'
            style.paddingLeft = style.paddingRight = style.paddingTop = style.paddingBottom = '0.25ex'
            style.borderStyle = 'solid'
            style.borderWidth = '1px'
            style.borderRadius = f'{br}{ICON_SIZE_UNIT}'
            style.fontSize = 'smaller'
            style.fontWeight = 'bold'
            if tdl:
                style.textDecorationLine = tdl
            if tds:
                style.textDecorationStyle = tds
            if tdc:
                style.textDecorationColor = tdc
            return

        bg = None
        if s.type is 'builtin':
            bg = builtin_color(s.which, is_dark)
        elif s.type is 'custom':
            bg = s.dark if is_dark else s.light
        if bg is None and s['background-color']:
            bg = s['background-color']
        if bg:
            style.backgroundColor = bg
            style.borderRadius = f'{br}{ICON_SIZE_UNIT}'

    def highlight_shade(self, is_dark):
        s = self.style
        if s.kind is 'decoration':
            if s.type is 'builtin':
                defs = builtin_decorations_dark[s.which] if is_dark else builtin_decorations_light[s.which]
            else:
                defs = s
            return defs['text-decoration-color'] or 'red'
        if s.type is 'builtin':
            return builtin_color(s.which, is_dark)
        if s.type is 'custom':
            return s.dark if is_dark else s.light
        return s['background-color'] or default_color(is_dark)

    def serialized(self):
        return JSON.stringify(self.style)

    @property
    def friendly_name(self):
        s = self.style
        if s.type is 'builtin':
            return friendly_name(s.kind, s.which)
        return s.friendly_name or _('Custom style')


def highlight_style_as_css(s, is_dark, foreground):

    def styler(node):
        def set(name, val):
            if val:
                node.style.setProperty(name, val, 'important')

        if s.kind is 'decoration':
            if s.type is 'builtin':
                keys = builtin_decorations_dark[s.which] if is_dark else builtin_decorations_light[s.which]
            else:
                keys = s
            set('text-decoration-line', keys['text-decoration-line'])
            set('text-decoration-color', keys['text-decoration-color'])
            set('text-decoration-style',  keys['text-decoration-style'])
            return

        bg = None
        fg = foreground or None
        if s.type is 'builtin':
            bg = builtin_color(s.which, is_dark)
        elif s.type is 'custom':
            bg = s.dark if is_dark else s.light
        elif s.color:
            fg = s.color
        set('background-color', bg or s['background-color'] or default_color(is_dark))
        set('color', fg or s.color or foreground)

    return styler


def custom_styles_equal(a, b):
    seen = {}
    for k in a:
        seen[k] = True
        if a[k] is not b[k]:
            return False
    for k in b:
        if not seen[k]:
            if a[k] is not b[k]:
                return False
    return True


class StyleCollection:

    def __init__(self):
        custom_highlight_styles = get_session_data().get('custom_highlight_styles')
        self.styles = []
        self.style_id_counter = 0

        def add(raw):
            hs = HighlightStyle(raw)
            hs.style_id = v'++self.style_id_counter'
            self.styles.push(hs)

        for raw in custom_highlight_styles:
            add(raw)
        for raw in all_builtin_styles():
            add(raw)


class AddStyle:  # {{{

    def __init__(self, get_container, hide_self):
        self.get_container = get_container
        self.hide_self = hide_self
        def onkeydown(ev):
            ev.stopPropagation()
            if ev.key is 'Escape':
                hide_self(None)

        get_container().appendChild(E.div(
            style='margin: 1rem; text-align: left',
            E.div(_('Style name:'), ' ', E.input(name='friendly_name', onkeydown=onkeydown, placeholder=_('Name for this style'))),
            E.div('\xa0'),
            E.div(
                _('Type of style:'), ' ',
                E.label(E.input(type='radio', name='style_type', value='color', onchange=self.change_type, checked=True), _('Color')),
                '\xa0\xa0',
                E.label(E.input(type='radio', name='style_type', value='decoration', onchange=self.change_type), _('Underline')),
            ),

            E.div(
                name='color-container',
                style='margin-top:1rem; border-top: solid; padding-top: 1rem',
                E.div(E.label(_('Color for light color themes: '), E.input(type='color', name='light_color', value='#ffff00'))),
                E.div('\xa0'),
                E.div(E.label(_('Color for dark color themes: '), E.input(type='color', name='dark_color', value='#cccc00'))),
            ),

            E.div(
                name='decoration-container',
                style='margin-top:1rem; border-top: solid; padding-top: 1rem',
                E.div(
                    _('Color for the line: '),
                    E.label(E.input(type='radio', name='color_type', value='currentColor', checked=True), _('Text color')),
                    '\xa0',
                    E.label(E.input(type='radio', name='color_type', value='custom_color'), _('Custom color:')),
                    '\xa0',
                    E.input(type='color', name='decoration_color', value='#ff0000', onchange=def():
                            self.get_container().querySelector('input[value=custom_color]').checked = True
                    )
                ),
                E.div('\xa0'),
                E.div(
                    E.label(_('Position of line: '), E.select(name='text_decoration_line',
                        E.option(_('Underline'), value='underline'),
                        E.option(_('Over-line'), value='overline'),
                        E.option(_('Strikeout'), value='strike-through'),
                    ))
                ),
                E.div('\xa0'),
                E.div(
                    E.label(_('Style of line: '), E.select(name='text_decoration_style',
                        E.option(_('Solid'), value='solid'),
                        E.option(_('Double'), value='double'),
                        E.option(_('Dotted'), value='dotted'),
                        E.option(_('Dashed'), value='dashed'),
                        E.option(_('Wavy'), value='wavy'),
                    ))
                ),
            ),
            E.div(
                style='margin-top:1rem; border-top: solid; padding-top: 1rem; display: flex; width: 100%; justify-content: space-between',
                create_button(_('Discard'), 'close', def(ev):
                    ev.stopPropagation()
                    hide_self(None)
                ),
                create_button(_('Save'), 'check', def(ev):
                    ev.stopPropagation()
                    if not self.friendly_name:
                        return error_dialog(_('No name specified'), _('You must give your custom style a name'), on_close=self.focus)
                    hide_self(self.created_style)
                ),
            ),
        ))
        self.change_type()

    def focus(self):
        self.get_container().querySelector('input[name=friendly_name]').focus()

    @property
    def style_type(self):
        return self.get_container().querySelector('input[name=style_type]:checked').value

    @property
    def color_type(self):
        return self.get_container().querySelector('input[name=color_type]:checked').value

    def change_type(self):
        c = self.get_container()
        q = self.style_type
        c.querySelector('[name=color-container]').style.display = 'block' if q is 'color' else 'none'
        c.querySelector('[name=decoration-container]').style.display = 'block' if q is 'decoration' else 'none'

    @property
    def friendly_name(self):
        return self.get_container().querySelector('input[name=friendly_name]').value

    @property
    def created_style(self):
        c = self.get_container()
        name = self.friendly_name
        if self.style_type is 'color':
            return custom_color_theme(name, c.querySelector('input[name=light_color]').value, c.querySelector('input[name=dark_color]').value)
        if self.color_type is 'currentColor':
            col = 'currentColor'
        else:
            col = c.querySelector('input[name=decoration_color]').value
        return custom_decoration_theme(
            name,
            c.querySelector('select[name=text_decoration_line]').value,
            c.querySelector('select[name=text_decoration_style]').value,
            col)
# }}}


class EditNotesAndColors:  # {{{

    def __init__(self, container, is_dark_theme, current_notes, current_style, annot_id, close_editor):
        self.initial_style = current_style
        self.is_dark_theme = is_dark_theme
        self.annot_id = annot_id

        def finish():
            close_editor(True)

        def abort():
            close_editor(False)

        def handle_keypress(ev):
            ev.stopPropagation()
            if ev.key is 'Escape':
                abort()
            elif ev.key is 'Enter' and ev.ctrlKey:
                finish()

        remove_button = create_button(_('Remove style'), 'trash', self.remove_custom_color, _('Remove this custom highlight style'))
        remove_button.classList.add('remove-custom-color')
        apply_button = create_button(
            _('Apply') if self.annot_id else _('Create'),
            'check', finish,
            (_('Finish editing highlight') if self.annot_id else _('Create highlight')) + ' [Ctrl+Enter]',
            True
        )
        apply_button.style.marginLeft = apply_button.style.marginTop = 'auto'

        c = E.div(
            style=f'background: {get_color("window-background")}; margin: auto; text-align: center; padding: 1ex;',
            onclick=def(ev): ev.stopPropagation();,
            id=unique_id(), E.div(
            E.textarea(
                current_notes or '',
                placeholder=_('Add notes for this highlight. Double click or long tap on a highlight to read its notes.'),
                rows='10', spellcheck='true', style='resize: none; width: 90%;',
                onkeydown=handle_keypress,
            ),

            E.div(
                class_='color-block',
                style=f'display: flex; flex-wrap: wrap; width: 100%; justify-content: center',
            ),
            E.div(
                style='width: 100%; display: flex; flex-wrap: wrap',
                create_button(_('Cancel'), 'close', abort, _('Abort') + ' [Esc]'),
                E.span('\xa0'),
                remove_button, apply_button
            ),
        ))
        self.container_id = c.id
        container.appendChild(c)
        container.style.maxWidth = '40rem'
        container.style.width = '90%'
        c.appendChild(E.div(style='display:none'))
        self.add_style = AddStyle(def(): return self.container.lastChild;, self.hide_add_style)
        self.seen_colors = {}
        custom_highlight_styles = get_session_data().get('custom_highlight_styles')
        for raw in custom_highlight_styles:
            self.add_color(HighlightStyle(raw)).classList.add('custom-style')
        for raw in all_builtin_styles():
            self.add_color(HighlightStyle(raw))
        if not c.querySelector('.current-swatch'):
            self.add_color(self.initial_style, True)
        parent = c.getElementsByClassName('color-block')[0]
        parent.appendChild(E.div(
            svgicon('plus', ICON_SIZE, ICON_SIZE),
            style='padding: 4px; margin: 4px;',
            title=_('Add a new highlight style'),
            class_='simple-link',
            onclick=def(ev):
                ev.stopPropagation()
                c = self.container
                c.firstChild.style.display = 'none'
                c.lastChild.style.display = 'block'
                self.add_style.focus()
        ))

        self.set_visibility_of_remove_button()
        window.setTimeout(self.notes_edit.focus.bind(self.notes_edit), 0)

    def hide_add_style(self, new_style):
        c = self.container
        c.firstChild.style.display = 'block'
        c.lastChild.style.display = 'none'
        if new_style:
            self.add_new_style(new_style)
        self.notes_edit.focus()

    def add_new_style(self, new_style):
        item = self.add_color(HighlightStyle(new_style), True)
        item.classList.add('custom-style')
        self.make_swatch_current(item)
        sd = get_session_data()
        custom_highlight_styles = sd.get('custom_highlight_styles')
        custom_highlight_styles.unshift(new_style)
        sd.set('custom_highlight_styles', custom_highlight_styles)

    def set_visibility_of_remove_button(self):
        c = self.container
        item = c.querySelector('.current-swatch.custom-style')
        c.querySelector('.remove-custom-color').style.display = 'block' if item else 'none'

    def add_color(self, hs, at_start):
        if self.seen_colors[hs.key]:
            return
        self.seen_colors[hs.key] = True
        ic = E.div()
        hs.make_swatch(ic, self.is_dark_theme)
        ic.classList.add('simple-link')
        is_current = hs.key is self.initial_style.key
        sqbg = get_color('window-background2') if is_current else 'unset'
        item = E.div(
            ic, style=f'padding: 4px; background-color: {sqbg}; margin: 4px; border-radius: {ICON_SIZE_VAL/4}{ICON_SIZE_UNIT}',
            onclick=self.change_color
        )
        if is_current:
            item.classList.add('current-swatch')
        item.dataset.style = hs.serialized()
        parent = self.container.getElementsByClassName('color-block')[0]
        if at_start:
            parent.insertBefore(item, parent.firstChild)
        else:
            parent.appendChild(item)
        return item

    def remove_custom_color(self):
        item = self.container.getElementsByClassName('current-swatch')[0]
        cct = JSON.parse(item.dataset.style)
        p = item.parentNode
        p.removeChild(item)
        self.make_swatch_current(p.firstChild)
        sd = get_session_data()
        custom_highlight_styles = sd.get('custom_highlight_styles')
        ans = v'[]'
        for x in custom_highlight_styles:
            if not custom_styles_equal(x, cct):
                ans.push(x)
        sd.set('custom_highlight_styles', ans)

    @property
    def container(self):
        return document.getElementById(self.container_id)

    @property
    def notes_edit(self):
        return self.container.getElementsByTagName('textarea')[0]

    def change_color(self, evt):
        evt.stopPropagation()
        self.make_swatch_current(evt.currentTarget)

    def make_swatch_current(self, item):
        for child in item.parentNode.childNodes:
            child.style.backgroundColor = 'unset'
            child.classList.remove('current-swatch')
        item.style.backgroundColor = get_color('window-background2')
        item.classList.add('current-swatch')
        self.notes_edit.focus()
        self.set_visibility_of_remove_button()

    @property
    def current_notes(self):
        return self.notes_edit.value or ''

    @property
    def current_style(self):
        style = self.container.getElementsByClassName('current-swatch')[0].dataset.style
        return HighlightStyle(JSON.parse(style))
# }}}
